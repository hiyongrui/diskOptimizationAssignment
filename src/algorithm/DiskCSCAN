package algorithm;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Properties;

public class DiskCSCAN {
	Properties p = new Properties();
	DiskParameter dp = null;
	
	public static void main(String args[]) {
		new DiskCSCAN("diskq1.properties");
	}
	
	public DiskCSCAN(String filename) {
		try
		{
			p.load(new BufferedReader (new FileReader (filename)));
			dp = new DiskParameter(p);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		generateAnalysis();
	}
	public void generateAnalysis()
	{
		generatecScan();
	}
	public void printSequence(String name, int location[])
	{
		String sequence = "";
		String working1 = "";
		String working2 = "";
		int total = 0;
		sequence += dp.getCurrent();
		int previous = dp.getCurrent();
		for (int i = 0; i < location.length; i++) {
			int current = location[i];
			sequence += "," + current;
			int d = Math.abs(previous-current);
			
			working1 += "|" + previous + "-" + current + "|+";
			working2 += d + " + ";
			total += d;
			previous = current;
		}
		System.out.println(name+'\n'+"====");
		System.out.println("Order of Access: "+sequence);
		System.out.println("Total Distance = "+working1.substring(0, working1.length()-1));
		System.out.println("               = "+working2.substring(0, working2.length()-2));
		System.out.println("               = "+total + '\n');
	}
	public void generatecScan() {
		int location[] = arrangeByCScan(dp.getCurrent(), dp.getSequence());
		printSequence("C-Scan" , location);
	}
	private int[] arrangeByCScan(int current, int sequence[])
	{
		int n = sequence.length; 
		int cscan[] = new int[n];
		for (int i = 0 ; i < n; i++) {
			cscan[i] = sequence[i];
		}
		int previous = dp.getPrevious();
		List<Integer> cscanHigher = new ArrayList<Integer>();
		List<Integer> cscanLower = new ArrayList<Integer>();
		for (int i = 0; i < cscan.length; i++) {
			if (cscan[i] > current) {
				cscanHigher.add(cscan[i]);
			}
			if (cscan[i] < current) {
				cscanLower.add((cscan[i]));
			}
		}
		int[] newcscan = new int[n+2];
		if (current < previous) {
			System.out.println("Beforesort Lower = " +cscanLower);
			System.out.println("Beforesort Higher = " +cscanHigher);
			Collections.sort(cscanHigher, Collections.reverseOrder());
			cscanHigher.add(0, 4999);
			Collections.sort(cscanLower, Collections.reverseOrder());
			cscanLower.add(0);
			System.out.println("Lower = " +cscanLower);
			System.out.println("Higher = " +cscanHigher);
			cscanLower.addAll(cscanHigher);
			System.out.println("AfterAdd" +cscanHigher);
			for (int i = 0; i < newcscan.length; i++) {
				newcscan[i] = cscanLower.get(i).intValue();
			}
		}
		else {
			Collections.sort(cscanHigher);
			cscanHigher.add(4999);
			Collections.sort(cscanLower);
			cscanLower.add(0, 0);
			cscanHigher.addAll(cscanLower);
			
			for (int i = 0; i < newcscan.length; i++) {
				newcscan[i] = cscanHigher.get(i).intValue();
			}
			
		}
		
		
		return newcscan;
		
	}
	
}
